<?php

/**
 * QDialogGen File
 *
 * The abstract QDialogGen class defined here is
 * code-generated and contains options, events and methods scraped from the
 * JQuery UI documentation Web site. It is not generated by the typical
 * codegen process, but rather is generated periodically by the core QCubed
 * team and checked in. However, the code to generate this file is
 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
 * and you can regenerate the files if you need to.
 *
 * The comments in this file are taken from the JQuery UI site, so they do
 * not always make sense with regard to QCubed. They are simply provided
 * as reference. Note that this is very low-level code, and does not always
 * update QCubed state variables. See the QDialogBase
 * file, which contains code to interface between this generated file and QCubed.
 *
 * Because subsequent re-code generations will overwrite any changes to this
 * file, you should leave this file unaltered to prevent yourself from losing
 * any information or code changes.  All customizations should be done by
 * overriding existing or implementing new methods, properties and variables
 * in the QDialog class file.
 *
 */
/* Custom event classes for this control */

/**
 * Triggered when a dialog is about to close. If canceled, the dialog will not
 *        close.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a> </li></ul><p><em>Note: The
 *        <code>ui</code> object is empty but included for consistency with other
 *        events.</em></p>
 */
class QDialog_BeforeCloseEvent extends QJqUiEvent
{

    const EventName = 'dialogbeforeclose';

}

/**
 * Triggered when the dialog is closed.<ul><li><strong>event</strong> Type:
 *        <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QDialog_CloseEvent extends QJqUiEvent
{

    const EventName = 'dialogclose';

}

/**
 * Triggered when the dialog is created.<ul><li><strong>event</strong> Type:
 *        <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QDialog_CreateEvent extends QJqUiEvent
{

    const EventName = 'dialogcreate';

}

/**
 * Triggered while the dialog is being dragged.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>position</strong> Type: <a>Object</a> The current CSS
 *        position of the dialog.</li> <li><strong>offset</strong> Type:
 *        <a>Object</a> The current offset position of the
 *        dialog.</li></ul></li></ul>
 */
class QDialog_DragEvent extends QJqUiEvent
{

    const EventName = 'dialogdrag';

}

/**
 * Triggered when the user starts dragging the
 *        dialog.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>position</strong> Type: <a>Object</a> The current CSS
 *        position of the dialog.</li> <li><strong>offset</strong> Type:
 *        <a>Object</a> The current offset position of the
 *        dialog.</li></ul></li></ul>
 */
class QDialog_DragStartEvent extends QJqUiEvent
{

    const EventName = 'dialogdragstart';

}

/**
 * Triggered after the dialog has been dragged.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>position</strong> Type: <a>Object</a> The current CSS
 *        position of the dialog.</li> <li><strong>offset</strong> Type:
 *        <a>Object</a> The current offset position of the
 *        dialog.</li></ul></li></ul>
 */
class QDialog_DragStopEvent extends QJqUiEvent
{

    const EventName = 'dialogdragstop';

}

/**
 * Triggered when the dialog gains focus.<ul><li><strong>event</strong> Type:
 *        <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QDialog_FocusEvent extends QJqUiEvent
{

    const EventName = 'dialogfocus';

}

/**
 * Triggered when the dialog is opened.<ul><li><strong>event</strong> Type:
 *        <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QDialog_OpenEvent extends QJqUiEvent
{

    const EventName = 'dialogopen';

}

/**
 * Triggered while the dialog is being resized.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>originalPosition</strong> Type: <a>Object</a> The CSS
 *        position of the dialog prior to being resized.</li>
 *        <li><strong>position</strong> Type: <a>Object</a> The current CSS position
 *        of the dialog.</li> <li><strong>originalSize</strong> Type: <a>Object</a>
 *        The size of the dialog prior to being resized.</li>
 *        <li><strong>size</strong> Type: <a>Object</a> The current size of the
 *        dialog.</li></ul></li></ul>
 */
class QDialog_ResizeEvent extends QJqUiEvent
{

    const EventName = 'dialogresize';

}

/**
 * Triggered when the user starts resizing the
 *        dialog.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>originalPosition</strong> Type: <a>Object</a> The CSS
 *        position of the dialog prior to being resized.</li>
 *        <li><strong>position</strong> Type: <a>Object</a> The current CSS position
 *        of the dialog.</li> <li><strong>originalSize</strong> Type: <a>Object</a>
 *        The size of the dialog prior to being resized.</li>
 *        <li><strong>size</strong> Type: <a>Object</a> The current size of the
 *        dialog.</li></ul></li></ul>
 */
class QDialog_ResizeStartEvent extends QJqUiEvent
{

    const EventName = 'dialogresizestart';

}

/**
 * Triggered after the dialog has been resized.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>originalPosition</strong> Type: <a>Object</a> The CSS
 *        position of the dialog prior to being resized.</li>
 *        <li><strong>position</strong> Type: <a>Object</a> The current CSS position
 *        of the dialog.</li> <li><strong>originalSize</strong> Type: <a>Object</a>
 *        The size of the dialog prior to being resized.</li>
 *        <li><strong>size</strong> Type: <a>Object</a> The current size of the
 *        dialog.</li></ul></li></ul>
 */
class QDialog_ResizeStopEvent extends QJqUiEvent
{

    const EventName = 'dialogresizestop';

}

/* Custom "property" event classes for this control */

/**
 * Generated QDialogGen class.
 *
 * This is the QDialogGen class which is automatically generated
 * by scraping the JQuery UI documentation website. As such, it includes all the options
 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
 * the QDialogBase class for any glue code to make this class more
 * usable in QCubed.
 *
 * @see QDialogBase
 * @package Controls\Base
 * @property boolean $AutoOpen If set to <code>true</code>, the dialog will automatically open upon
 *        initialization. If <code>false</code>, the dialog will stay hidden until
 *        the <a><code>open()</code></a> method is called.
 * @property mixed $Buttons Specifies which buttons should be displayed on the dialog. The context of
 *        the callback is the dialog element; if you need access to the button, it is
 *        available as the target of the event object.<strong>Multiple types
 *        supported:</strong><ul><li><strong>Object</strong>: The keys are the button
 *        labels and the values are the callbacks for when the associated button is
 *        clicked.</li> <li><strong>Array</strong>: Each element of the array must be
 *        an object defining the attributes, properties, and event handlers to set on
 *        the button.</li></ul>
 * @property boolean $CloseOnEscape Specifies whether the dialog should close when it has focus and the user
 *        presses the escape (ESC) key.
 * @property string $CloseText Specifies the text for the close button. Note that the close text is
 *        visibly hidden when using a standard theme.
 * @property string $DialogClass The specified class name(s) will be added to the dialog, for additional
 *        theming.
 * @property boolean $Draggable If set to <code>true</code>, the dialog will be draggable by the title bar.
 *        Requires the <a>jQuery UI Draggable wiget</a> to be included.
 * @property mixed $Height The height of the dialog.<strong>Multiple types
 *        supported:</strong><ul><li><strong>Number</strong>: The height in
 *        pixels.</li> <li><strong>String</strong>: The only supported string value
 *        is <code>"auto"</code> which will allow the dialog height to adjust based
 *        on its content.</li></ul>
 * @property mixed $Hide If and how to animate the hiding of the dialog.<strong>Multiple types
 *        supported:</strong><ul><li><strong>Number</strong>:                    The dialog will
 *        fade out while animating the height and width for the specified
 *        duration.</li> <li><strong>String</strong>:                    The dialog will be hidden
 *        using the specified jQuery UI effect. See the <a>list of effects</a> for
 *        possible values.</li> <li><strong>Object</strong>: If the value is an
 *        object, then <code>effect</code>, <code>duration</code>, and
 *        <code>easing</code> properties may be provided. The <code>effect</code>
 *        property must be the name of a jQuery UI effect. When using a jQuery UI
 *        effect that supports additional settings, you may include those settings in
 *        the object and they will be passed to the effect. If <code>duration</code>
 *        or <code>easing</code> is omitted, then the default values will be
 *        used.</li></ul>
 * @property integer $MaxHeight The maximum height to which the dialog can be resized, in pixels.
 * @property integer $MaxWidth The maximum width to which the dialog can be resized, in pixels.
 * @property integer $MinHeight The minimum height to which the dialog can be resized, in pixels.
 * @property integer $MinWidth The minimum width to which the dialog can be resized, in pixels.
 * @property boolean $Modal If set to <code>true</code>, the dialog will have modal behavior; other
 *        items on the page will be disabled, i.e., cannot be interacted with. Modal
 *        dialogs create an overlay below the dialog but above other page elements.
 * @property mixed $Position Specifies where the dialog should be displayed. The dialog will handle
 *        collisions such that as much of the dialog is visible as
 *        possible.<strong>Multiple types
 *        supported:</strong><ul><li><strong>Object</strong>: Identifies the position
 *        of the dialog when opened. The <code>of</code> option defaults to the
 *        window, but you can specify another element to position against. You can
 *        refer to the <a>jQuery UI Position</a> utility for more details about the
 *        various options.</li> <li><strong>String</strong>: A string representing
 *        the position within the viewport. Possible values: <code>"center"</code>,
 *        <code>"left"</code>, <code>"right"</code>, <code>"top"</code>,
 *        <code>"bottom"</code>.</li> <li><strong>Array</strong>: An array containing
 *        an <em>x, y</em> coordinate pair in pixel offset from the top left corner
 *        of the viewport or the name of a possible string value.</li></ul>
 * @property boolean $Resizable If set to <code>true</code>, the dialog will be resizable. Requires the
 *        <a>jQuery UI Resizable widget</a> to be included.
 * @property mixed $Show If and how to animate the showing of the dialog.<strong>Multiple types
 *        supported:</strong><ul><li><strong>Number</strong>:                    The dialog will
 *        fade in while animating the height and width for the specified
 *        duration.</li> <li><strong>String</strong>:                    The dialog will be shown
 *        using the specified jQuery UI effect. See the <a>list of effects</a> for
 *        possible values.</li> <li><strong>Object</strong>: If the value is an
 *        object, then <code>effect</code>, <code>duration</code>, and
 *        <code>easing</code> properties may be provided. The <code>effect</code>
 *        property must be the name of a jQuery UI effect. When using a jQuery UI
 *        effect that supports additional settings, you may include those settings in
 *        the object and they will be passed to the effect. If <code>duration</code>
 *        or <code>easing</code> is omitted, then the default values will be
 *        used.</li></ul>
 * @property boolean $Stack Specifies whether the dialog will stack on top of other dialogs. This will
 *        cause the dialog to move to the front of other dialogs when it gains focus.
 * @property string $Title Specifies the title of the dialog. Any valid HTML may be set as the title.
 *        The title can also be specified by the <code>title</code> attribute on the
 *        dialog source element.
 * @property integer $Width The width of the dialog, in pixels.
 * @property integer $ZIndex The starting z-index for the dialog.
 */
class QDialogGen extends QPanel
{

    protected $strJavaScripts = __JQUERY_EFFECTS__;
    protected $strStyleSheets = __JQUERY_CSS__;

    /** @var boolean */
    protected $blnAutoOpen = null;

    /** @var mixed */
    protected $mixButtons = null;

    /** @var boolean */
    protected $blnCloseOnEscape = null;

    /** @var string */
    protected $strCloseText = null;

    /** @var string */
    protected $strDialogClass = null;

    /** @var boolean */
    protected $blnDraggable = null;

    /** @var mixed */
    protected $mixHeight = null;

    /** @var mixed */
    protected $mixHide = null;

    /** @var integer */
    protected $intMaxHeight = null;

    /** @var integer */
    protected $intMaxWidth = null;

    /** @var integer */
    protected $intMinHeight = null;

    /** @var integer */
    protected $intMinWidth = null;

    /** @var boolean */
    protected $blnModal = null;

    /** @var mixed */
    protected $mixPosition = null;

    /** @var boolean */
    protected $blnResizable = null;

    /** @var mixed */
    protected $mixShow = null;

    /** @var boolean */
    protected $blnStack = null;

    /** @var string */
    protected $strTitle = null;

    /** @var integer */
    protected $intWidth = null;

    /** @var integer */
    protected $intZIndex = null;

    public function GetEndScript()
    {
        $str = '';
        if ($this->getJqControlId() !== $this->ControlId) {
            // #845: if the element receiving the jQuery UI events is different than this control
            // we need to clean-up the previously attached event handlers, so that they are not duplicated
            // during the next ajax update which replaces this control.
            $str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
        }
        return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
    }

    public function GetControlJavaScript()
    {
        return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
    }

    public function getJqSetupFunction()
    {
        return 'dialog';
    }

    protected function makeJqOptions()
    {
        $strJqOptions = '';
        $strJqOptions .= $this->makeJsProperty('AutoOpen', 'autoOpen');
        $strJqOptions .= $this->makeJsProperty('Buttons', 'buttons');
        $strJqOptions .= $this->makeJsProperty('CloseOnEscape', 'closeOnEscape');
        $strJqOptions .= $this->makeJsProperty('CloseText', 'closeText');
        $strJqOptions .= $this->makeJsProperty('DialogClass', 'dialogClass');
        $strJqOptions .= $this->makeJsProperty('Draggable', 'draggable');
        $strJqOptions .= $this->makeJsProperty('Height', 'height');
        $strJqOptions .= $this->makeJsProperty('Hide', 'hide');
        $strJqOptions .= $this->makeJsProperty('MaxHeight', 'maxHeight');
        $strJqOptions .= $this->makeJsProperty('MaxWidth', 'maxWidth');
        $strJqOptions .= $this->makeJsProperty('MinHeight', 'minHeight');
        $strJqOptions .= $this->makeJsProperty('MinWidth', 'minWidth');
        $strJqOptions .= $this->makeJsProperty('Modal', 'modal');
        $strJqOptions .= $this->makeJsProperty('Position', 'position');
        $strJqOptions .= $this->makeJsProperty('Resizable', 'resizable');
        $strJqOptions .= $this->makeJsProperty('Show', 'show');
        $strJqOptions .= $this->makeJsProperty('Stack', 'stack');
        $strJqOptions .= $this->makeJsProperty('Title', 'title');
        $strJqOptions .= $this->makeJsProperty('Width', 'width');
        $strJqOptions .= $this->makeJsProperty('ZIndex', 'zIndex');
        if ($strJqOptions)
            $strJqOptions = substr($strJqOptions, 0, -2);
        return $strJqOptions;
    }

    protected function makeJsProperty($strProp, $strKey)
    {
        $objValue = $this->$strProp;
        if (null === $objValue) {
            return '';
        }

        return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
    }

    /**
     * Closes the dialog.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Close()
    {
        $this->CallJqUiMethod("close");
    }

    /**
     * Call a JQuery UI Method on the object.
     *
     * A helper function to call a jQuery UI Method. Takes variable number of arguments.
     *
     * @param string $strMethodName the method name to call
     * @internal param $mixed [optional] $mixParam1
     * @internal param $mixed [optional] $mixParam2
     */
    protected function CallJqUiMethod($strMethodName /* , ... */)
    {
        $args = func_get_args();

        $strArgs = JavaScriptHelper::toJsObject($args);
        $strJs = sprintf('jQuery("#%s").%s(%s)', $this->getJqControlId(), $this->getJqSetupFunction(), substr($strArgs, 1, strlen($strArgs) - 2)); // params without brackets
        QApplication::ExecuteJavaScript($strJs);
    }

    /**
     * Removes the dialog functionality completely. This will return the element
     * back to its pre-init state.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Destroy()
    {
        $this->CallJqUiMethod("destroy");
    }

    /**
     * Whether the dialog is currently open.<ul><li>This method does not accept
     * any arguments.</li></ul>
     */
    public function IsOpen()
    {
        $this->CallJqUiMethod("isOpen");
    }

    /**
     * Moves the dialog to the top of the dialog stack.<ul><li>This method does
     * not accept any arguments.</li></ul>
     */
    public function MoveToTop()
    {
        $this->CallJqUiMethod("moveToTop");
    }

    /**
     * Opens the dialog.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Open()
    {
        $this->CallJqUiMethod("open");
    }

    /**
     * Gets the value currently associated with the specified
     * <code>optionName</code>.<ul><li><strong>optionName</strong> Type:
     * <a>String</a> The name of the option to get.</li></ul>
     * @param $optionName
     */
    public function Option($optionName)
    {
        $this->CallJqUiMethod("option", $optionName);
    }

    /**
     * Gets an object containing key/value pairs representing the current dialog
     * options hash.<ul><li>This method does not accept any arguments.</li></ul>
     */
    public function Option1()
    {
        $this->CallJqUiMethod("option");
    }

    /**
     * Sets the value of the dialog option associated with the specified
     * <code>optionName</code>.<ul><li><strong>optionName</strong> Type:
     * <a>String</a> The name of the option to set.</li>
     * <li><strong>value</strong> Type: <a>Object</a> A value to set for the
     * option.</li></ul>
     * @param $optionName
     * @param $value
     */
    public function Option2($optionName, $value)
    {
        $this->CallJqUiMethod("option", $optionName, $value);
    }

    /**
     * Sets one or more options for the dialog.<ul><li><strong>options</strong>
     * Type: <a>Object</a> A map of option-value pairs to set.</li></ul>
     * @param $options
     */
    public function Option3($options)
    {
        $this->CallJqUiMethod("option", $options);
    }

    public function __get($strName)
    {
        switch ($strName) {
            case 'AutoOpen':
                return $this->blnAutoOpen;
            case 'Buttons':
                return $this->mixButtons;
            case 'CloseOnEscape':
                return $this->blnCloseOnEscape;
            case 'CloseText':
                return $this->strCloseText;
            case 'DialogClass':
                return $this->strDialogClass;
            case 'Draggable':
                return $this->blnDraggable;
            case 'Height':
                return $this->mixHeight;
            case 'Hide':
                return $this->mixHide;
            case 'MaxHeight':
                return $this->intMaxHeight;
            case 'MaxWidth':
                return $this->intMaxWidth;
            case 'MinHeight':
                return $this->intMinHeight;
            case 'MinWidth':
                return $this->intMinWidth;
            case 'Modal':
                return $this->blnModal;
            case 'Position':
                return $this->mixPosition;
            case 'Resizable':
                return $this->blnResizable;
            case 'Show':
                return $this->mixShow;
            case 'Stack':
                return $this->blnStack;
            case 'Title':
                return $this->strTitle;
            case 'Width':
                return $this->intWidth;
            case 'ZIndex':
                return $this->intZIndex;
            default:
                try {
                    return parent::__get($strName);
                } catch (QCallerException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }
        }
    }

    public function __set($strName, $mixValue)
    {
        switch ($strName) {
            case 'AutoOpen':
                try {
                    $this->blnAutoOpen = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'autoOpen', $this->blnAutoOpen);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Buttons':
                $this->mixButtons = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'buttons', $mixValue);
                }
                break;

            case 'CloseOnEscape':
                try {
                    $this->blnCloseOnEscape = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'closeOnEscape', $this->blnCloseOnEscape);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'CloseText':
                try {
                    $this->strCloseText = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'closeText', $this->strCloseText);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'DialogClass':
                try {
                    $this->strDialogClass = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'dialogClass', $this->strDialogClass);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Draggable':
                try {
                    $this->blnDraggable = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'draggable', $this->blnDraggable);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Height':
                $this->mixHeight = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'height', $mixValue);
                }
                break;

            case 'Hide':
                $this->mixHide = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'hide', $mixValue);
                }
                break;

            case 'MaxHeight':
                try {
                    $this->intMaxHeight = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'maxHeight', $this->intMaxHeight);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'MaxWidth':
                try {
                    $this->intMaxWidth = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'maxWidth', $this->intMaxWidth);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'MinHeight':
                try {
                    $this->intMinHeight = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'minHeight', $this->intMinHeight);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'MinWidth':
                try {
                    $this->intMinWidth = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'minWidth', $this->intMinWidth);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Modal':
                try {
                    $this->blnModal = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'modal', $this->blnModal);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Position':
                $this->mixPosition = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'position', $mixValue);
                }
                break;

            case 'Resizable':
                try {
                    $this->blnResizable = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'resizable', $this->blnResizable);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Show':
                $this->mixShow = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'show', $mixValue);
                }
                break;

            case 'Stack':
                try {
                    $this->blnStack = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'stack', $this->blnStack);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Title':
                try {
                    $this->strTitle = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'title', $this->strTitle);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Width':
                try {
                    $this->intWidth = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'width', $this->intWidth);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'ZIndex':
                try {
                    $this->intZIndex = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'zIndex', $this->intZIndex);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }


            default:
                try {
                    parent::__set($strName, $mixValue);
                    break;
                } catch (QCallerException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }
        }
    }

}

?>
