<?php

/**
 * QSelectableGen File
 *
 * The abstract QSelectableGen class defined here is
 * code-generated and contains options, events and methods scraped from the
 * JQuery UI documentation Web site. It is not generated by the typical
 * codegen process, but rather is generated periodically by the core QCubed
 * team and checked in. However, the code to generate this file is
 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
 * and you can regenerate the files if you need to.
 *
 * The comments in this file are taken from the JQuery UI site, so they do
 * not always make sense with regard to QCubed. They are simply provided
 * as reference. Note that this is very low-level code, and does not always
 * update QCubed state variables. See the QSelectableBase
 * file, which contains code to interface between this generated file and QCubed.
 *
 * Because subsequent re-code generations will overwrite any changes to this
 * file, you should leave this file unaltered to prevent yourself from losing
 * any information or code changes.  All customizations should be done by
 * overriding existing or implementing new methods, properties and variables
 * in the QSelectable class file.
 *
 */
/* Custom event classes for this control */

/**
 * Triggered when the selectable is created.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QSelectable_CreateEvent extends QJqUiEvent
{

    const EventName = 'selectablecreate';

}

/**
 * Triggered at the end of the select operation, on each element added to the
 *        selection.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>selected</strong> Type: <a>Element</a> The selectable item
 *        that has been selected.</li></ul></li></ul>
 */
class QSelectable_SelectedEvent extends QJqUiEvent
{

    const EventName = 'selectableselected';

}

/**
 * Triggered during the select operation, on each element added to the
 *        selection.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>selecting</strong> Type: <a>Element</a> The current
 *        selectable item being selected.</li></ul></li></ul>
 */
class QSelectable_SelectingEvent extends QJqUiEvent
{

    const EventName = 'selectableselecting';

}

/**
 * Triggered at the beginning of the select
 *        operation.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a> </li></ul><p><em>Note: The
 *        <code>ui</code> object is empty but included for consistency with other
 *        events.</em></p>
 */
class QSelectable_StartEvent extends QJqUiEvent
{

    const EventName = 'selectablestart';

}

/**
 * Triggered at the end of the select operation.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QSelectable_StopEvent extends QJqUiEvent
{

    const EventName = 'selectablestop';

}

/**
 * Triggered at the end of the select operation, on each element removed from
 *        the selection.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>unselected</strong> Type: <a>Element</a> The selectable
 *        item that has been unselected.</li></ul></li></ul>
 */
class QSelectable_UnselectedEvent extends QJqUiEvent
{

    const EventName = 'selectableunselected';

}

/**
 * Triggered during the select operation, on each element removed from the
 *        selection.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>unselecting</strong> Type: <a>Element</a> The current
 *        selectable item being unselected.</li></ul></li></ul>
 */
class QSelectable_UnselectingEvent extends QJqUiEvent
{

    const EventName = 'selectableunselecting';

}

/* Custom "property" event classes for this control */

/**
 * Generated QSelectableGen class.
 *
 * This is the QSelectableGen class which is automatically generated
 * by scraping the JQuery UI documentation website. As such, it includes all the options
 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
 * the QSelectableBase class for any glue code to make this class more
 * usable in QCubed.
 *
 * @see QSelectableBase
 * @package Controls\Base
 * @property mixed $AppendTo Which element the selection helper (the lasso) should be appended to.
 * @property boolean $AutoRefresh This determines whether to refresh (recalculate) the position and size of
 *        each selectee at the beginning of each select operation. If you have many
 *        items, you may want to set this to false and call the
 *        <a><code>refresh()</code></a> method manually.
 * @property mixed $Cancel Prevents selecting if you start on elements matching the selector.
 * @property integer $Delay Time in milliseconds to define when the selecting should start. This helps
 *        prevent unwanted selections when clicking on an element.
 * @property boolean $Disabled Disables the selectable if set to <code>true</code>.
 * @property integer $Distance Tolerance, in pixels, for when selecting should start. If specified,
 *        selecting will not start until the mouse has been dragged beyond the
 *        specified distance.
 * @property mixed $Filter The matching child elements will be made selectees (able to be selected).
 * @property string $Tolerance Specifies which mode to use for testing whether the lasso should select an
 *        item. Possible values:                <ul><li><code>"fit"</code>: Lasso overlaps the
 *        item entirely.</li>                    <li><code>"touch"</code>: Lasso overlaps the item
 *        by any amount.</li></ul>
 */
class QSelectableGen extends QPanel
{

    protected $strJavaScripts = __JQUERY_EFFECTS__;
    protected $strStyleSheets = __JQUERY_CSS__;

    /** @var mixed */
    protected $mixAppendTo = null;

    /** @var boolean */
    protected $blnAutoRefresh = null;

    /** @var mixed */
    protected $mixCancel = null;

    /** @var integer */
    protected $intDelay;

    /** @var boolean */
    protected $blnDisabled = null;

    /** @var integer */
    protected $intDistance;

    /** @var mixed */
    protected $mixFilter = null;

    /** @var string */
    protected $strTolerance = null;

    public function GetEndScript()
    {
        $str = '';
        if ($this->getJqControlId() !== $this->ControlId) {
            // #845: if the element receiving the jQuery UI events is different than this control
            // we need to clean-up the previously attached event handlers, so that they are not duplicated
            // during the next ajax update which replaces this control.
            $str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
        }
        return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
    }

    public function GetControlJavaScript()
    {
        return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
    }

    public function getJqSetupFunction()
    {
        return 'selectable';
    }

    protected function makeJqOptions()
    {
        $strJqOptions = '';
        $strJqOptions .= $this->makeJsProperty('AppendTo', 'appendTo');
        $strJqOptions .= $this->makeJsProperty('AutoRefresh', 'autoRefresh');
        $strJqOptions .= $this->makeJsProperty('Cancel', 'cancel');
        $strJqOptions .= $this->makeJsProperty('Delay', 'delay');
        $strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
        $strJqOptions .= $this->makeJsProperty('Distance', 'distance');
        $strJqOptions .= $this->makeJsProperty('Filter', 'filter');
        $strJqOptions .= $this->makeJsProperty('Tolerance', 'tolerance');
        if ($strJqOptions)
            $strJqOptions = substr($strJqOptions, 0, -2);
        return $strJqOptions;
    }

    protected function makeJsProperty($strProp, $strKey)
    {
        $objValue = $this->$strProp;
        if (null === $objValue) {
            return '';
        }

        return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
    }

    /**
     * Removes the selectable functionality completely. This will return the
     * element back to its pre-init state.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Destroy()
    {
        $this->CallJqUiMethod("destroy");
    }

    /**
     * Call a JQuery UI Method on the object.
     *
     * A helper function to call a jQuery UI Method. Takes variable number of arguments.
     *
     * @param string $strMethodName the method name to call
     * @internal param $mixed [optional] $mixParam1
     * @internal param $mixed [optional] $mixParam2
     */
    protected function CallJqUiMethod($strMethodName /* , ... */)
    {
        $args = func_get_args();

        $strArgs = JavaScriptHelper::toJsObject($args);
        $strJs = sprintf('jQuery("#%s").%s(%s)', $this->getJqControlId(), $this->getJqSetupFunction(), substr($strArgs, 1, strlen($strArgs) - 2)); // params without brackets
        QApplication::ExecuteJavaScript($strJs);
    }

    /**
     * Disables the selectable.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Disable()
    {
        $this->CallJqUiMethod("disable");
    }

    /**
     * Enables the selectable.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Enable()
    {
        $this->CallJqUiMethod("enable");
    }

    /**
     * Gets the value currently associated with the specified
     * <code>optionName</code>.<ul><li><strong>optionName</strong> Type:
     * <a>String</a> The name of the option to get.</li></ul>
     * @param $optionName
     */
    public function Option($optionName)
    {
        $this->CallJqUiMethod("option", $optionName);
    }

    /**
     * Gets an object containing key/value pairs representing the current
     * selectable options hash.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Option1()
    {
        $this->CallJqUiMethod("option");
    }

    /**
     * Sets the value of the selectable option associated with the specified
     * <code>optionName</code>.<ul><li><strong>optionName</strong> Type:
     * <a>String</a> The name of the option to set.</li>
     * <li><strong>value</strong> Type: <a>Object</a> A value to set for the
     * option.</li></ul>
     * @param $optionName
     * @param $value
     */
    public function Option2($optionName, $value)
    {
        $this->CallJqUiMethod("option", $optionName, $value);
    }

    /**
     * Sets one or more options for the
     * selectable.<ul><li><strong>options</strong> Type: <a>Object</a> A map of
     * option-value pairs to set.</li></ul>
     * @param $options
     */
    public function Option3($options)
    {
        $this->CallJqUiMethod("option", $options);
    }

    /**
     * Refresh the position and size of each selectee element. This method can be
     * used to manually recalculate the position and size of each selectee when
     * the <a><code>autoRefresh</code></a> option is set to
     * <code>false</code>.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Refresh()
    {
        $this->CallJqUiMethod("refresh");
    }

    public function __get($strName)
    {
        switch ($strName) {
            case 'AppendTo':
                return $this->mixAppendTo;
            case 'AutoRefresh':
                return $this->blnAutoRefresh;
            case 'Cancel':
                return $this->mixCancel;
            case 'Delay':
                return $this->intDelay;
            case 'Disabled':
                return $this->blnDisabled;
            case 'Distance':
                return $this->intDistance;
            case 'Filter':
                return $this->mixFilter;
            case 'Tolerance':
                return $this->strTolerance;
            default:
                try {
                    return parent::__get($strName);
                } catch (QCallerException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }
        }
    }

    public function __set($strName, $mixValue)
    {
        switch ($strName) {
            case 'AppendTo':
                $this->mixAppendTo = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'appendTo', $mixValue);
                }
                break;

            case 'AutoRefresh':
                try {
                    $this->blnAutoRefresh = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'autoRefresh', $this->blnAutoRefresh);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Cancel':
                $this->mixCancel = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'cancel', $mixValue);
                }
                break;

            case 'Delay':
                try {
                    $this->intDelay = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'delay', $this->intDelay);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Disabled':
                try {
                    $this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Distance':
                try {
                    $this->intDistance = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'distance', $this->intDistance);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Filter':
                $this->mixFilter = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'filter', $mixValue);
                }
                break;

            case 'Tolerance':
                try {
                    $this->strTolerance = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'tolerance', $this->strTolerance);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }


            case 'Enabled':
                $this->Disabled = !$mixValue; // Tie in standard QCubed functionality
                parent::__set($strName, $mixValue);
                break;

            default:
                try {
                    parent::__set($strName, $mixValue);
                    break;
                } catch (QCallerException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }
        }
    }

}

?>
