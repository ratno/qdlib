<?php

/**
 * QSortableGen File
 *
 * The abstract QSortableGen class defined here is
 * code-generated and contains options, events and methods scraped from the
 * JQuery UI documentation Web site. It is not generated by the typical
 * codegen process, but rather is generated periodically by the core QCubed
 * team and checked in. However, the code to generate this file is
 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
 * and you can regenerate the files if you need to.
 *
 * The comments in this file are taken from the JQuery UI site, so they do
 * not always make sense with regard to QCubed. They are simply provided
 * as reference. Note that this is very low-level code, and does not always
 * update QCubed state variables. See the QSortableBase
 * file, which contains code to interface between this generated file and QCubed.
 *
 * Because subsequent re-code generations will overwrite any changes to this
 * file, you should leave this file unaltered to prevent yourself from losing
 * any information or code changes.  All customizations should be done by
 * overriding existing or implementing new methods, properties and variables
 * in the QSortable class file.
 *
 */
/* Custom event classes for this control */

/**
 * This event is triggered when using connected lists, every connected list on
 *        drag start receives it.<ul><li><strong>event</strong> Type: <a>Event</a>
 *        </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_ActivateEvent extends QJqUiEvent
{

    const EventName = 'sortactivate';

}

/**
 * This event is triggered when sorting stops, but when the placeholder/helper
 *        is still available.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_BeforeStopEvent extends QJqUiEvent
{

    const EventName = 'sortbeforestop';

}

/**
 * This event is triggered during sorting, but only when the DOM position has
 *        changed.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_ChangeEvent extends QJqUiEvent
{

    const EventName = 'sortchange';

}

/**
 * Triggered when the sortable is created.<ul><li><strong>event</strong> Type:
 *        <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        </li></ul><p><em>Note: The <code>ui</code> object is empty but included for
 *        consistency with other events.</em></p>
 */
class QSortable_CreateEvent extends QJqUiEvent
{

    const EventName = 'sortcreate';

}

/**
 * This event is triggered when sorting was stopped, is propagated to all
 *        possible connected lists.<ul><li><strong>event</strong> Type: <a>Event</a>
 *        </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_DeactivateEvent extends QJqUiEvent
{

    const EventName = 'sortdeactivate';

}

/**
 * This event is triggered when a sortable item is moved away from a connected
 *        list.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_OutEvent extends QJqUiEvent
{

    const EventName = 'sortout';

}

/**
 * This event is triggered when a sortable item is moved into a connected
 *        list.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_OverEvent extends QJqUiEvent
{

    const EventName = 'sortover';

}

/**
 * This event is triggered when a connected sortable list has received an item
 *        from another list.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_ReceiveEvent extends QJqUiEvent
{

    const EventName = 'sortreceive';

}

/**
 * This event is triggered when a sortable item has been dragged out from the
 *        list and into another.<ul><li><strong>event</strong> Type: <a>Event</a>
 *        </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_RemoveEvent extends QJqUiEvent
{

    const EventName = 'sortremove';

}

/**
 * This event is triggered during sorting.<ul><li><strong>event</strong> Type:
 *        <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_SortEvent extends QJqUiEvent
{

    const EventName = 'sort';

}

/**
 * This event is triggered when sorting starts.<ul><li><strong>event</strong>
 *        Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_StartEvent extends QJqUiEvent
{

    const EventName = 'sortstart';

}

/**
 * This event is triggered when sorting has
 *        stopped.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_StopEvent extends QJqUiEvent
{

    const EventName = 'sortstop';

}

/**
 * This event is triggered when the user stopped sorting and the DOM position
 *        has changed.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
 *        <li><strong>ui</strong> Type: <a>Object</a>
 *        <ul><li><strong>helper</strong> Type: <a>jQuery</a> The jQuery object
 *        representing the helper being sorted</li> <li><strong>item</strong> Type:
 *        <a>jQuery</a> The jQuery object representing the current dragged
 *        element</li> <li><strong>offset</strong> Type: <a>Object</a> The current
 *        absolute position of the helper represented as <code>{ top, left
 *        }</code></li> <li><strong>position</strong> Type: <a>Object</a> The current
 *        position of the helper represented as <code>{ top, left }</code></li>
 *        <li><strong>originalPosition</strong> Type: <a>Object</a> The original
 *        position of the element represented as <code>{ top, left }</code></li>
 *        <li><strong>sender</strong> Type: <a>jQuery</a> The sortable that the item
 *        comes from if moving from one sortable to another</li></ul></li></ul>
 */
class QSortable_UpdateEvent extends QJqUiEvent
{

    const EventName = 'sortupdate';

}

/* Custom "property" event classes for this control */

/**
 * Generated QSortableGen class.
 *
 * This is the QSortableGen class which is automatically generated
 * by scraping the JQuery UI documentation website. As such, it includes all the options
 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
 * the QSortableBase class for any glue code to make this class more
 * usable in QCubed.
 *
 * @see QSortableBase
 * @package Controls\Base
 * @property mixed $AppendTo Defines where the helper that moves with the mouse is being appended to
 *        during the drag (for example, to resolve overlap/zIndex
 *        issues).<strong>Multiple types
 *        supported:</strong><ul><li><strong>jQuery</strong>: A jQuery object
 *        containing the element to append the helper to.</li>
 *        <li><strong>Element</strong>: The element to append the helper to.</li>
 *        <li><strong>Selector</strong>: A selector specifying which element to
 *        append the helper to.</li> <li><strong>String</strong>: The string
 *        <code>"parent"</code> will cause the helper to be a sibling of the sortable
 *        item.</li></ul>
 * @property string $Axis If defined, the items can be dragged only horizontally or vertically.
 *        Possible values: <code>"x"</code>, <code>"y"</code>.
 * @property mixed $Cancel Prevents sorting if you start on elements matching the selector.
 * @property mixed $ConnectWith A selector of other sortable elements that the items from this list should
 *        be connected to. This is a one-way relationship, if you want the items to
 *        be connected in both directions, the <code>connectWith</code> option must
 *        be set on both sortable elements.
 * @property mixed $Containment <p>Defines a bounding box that the sortable items are contrained to while
 *        dragging.</p>                <p>Note: The element specified for containment must have
 *        a calculated width and height (though it need not be explicit). For
 *        example, if you have <code>float: left</code> sortable children and specify
 *        <code>containment: "parent"</code> be sure to have <code>float: left</code>
 *        on the sortable/parent container as well or it will have <code>height:
 *        0</code>, causing undefined behavior.</p><strong>Multiple types
 *        supported:</strong><ul><li><strong>Element</strong>: An element to use as
 *        the container.</li> <li><strong>Selector</strong>: A selector specifying an
 *        element to use as the container.</li> <li><strong>String</strong>: A string
 *        identifying an element to use as the container. Possible values:
 *        <code>"parent"</code>, <code>"document"</code>,
 *        <code>"window"</code>.</li></ul>
 * @property string $Cursor Defines the cursor that is being shown while sorting.
 * @property mixed $CursorAt Moves the sorting element or helper so the cursor always appears to drag
 *        from the same position. Coordinates can be given as a hash using a
 *        combination of one or two keys: <code>{ top, left, right, bottom }</code>.
 * @property integer $Delay Time in milliseconds to define when the sorting should start. Adding a
 *        delay helps preventing unwanted drags when clicking on an element.
 * @property boolean $Disabled Disables the sortable if set to <code>true</code>.
 * @property integer $Distance Tolerance, in pixels, for when sorting should start. If specified, sorting
 *        will not start until after mouse is dragged beyond distance. Can be used to
 *        allow for clicks on elements within a handle.
 * @property boolean $DropOnEmpty If <code>false</code>, items from this sortable can't be dropped on an
 *        empty connect sortable (see the <a><code>connectWith</code></a> option.
 * @property boolean $ForceHelperSize If <code>true</code>, forces the helper to have a size.
 * @property boolean $ForcePlaceholderSize If true, forces the placeholder to have a size.
 * @property array $Grid Snaps the sorting element or helper to a grid, every x and y pixels. Array
 *        values: <code>[ x, y ]</code>.
 * @property mixed $Handle Restricts sort start click to the specified element.
 * @property mixed $Helper Allows for a helper element to be used for dragging
 *        display.<strong>Multiple types
 *        supported:</strong><ul><li><strong>String</strong>: If set to
 *        <code>"clone"</code>, then the element will be cloned and the clone will be
 *        dragged.</li> <li><strong>Function</strong>: A function that will return a
 *        DOMElement to use while dragging. The function receives the event and the
 *        element being sorted.</li></ul>
 * @property mixed $Items Specifies which items inside the element should be sortable.
 * @property integer $Opacity Defines the opacity of the helper while sorting. From <code>0.01</code> to
 *        <code>1</code>.
 * @property string $Placeholder A class name that gets applied to the otherwise white space.
 * @property mixed $Revert Whether the sortable items should revert to their new positions using a
 *        smooth animation.<strong>Multiple types
 *        supported:</strong><ul><li><strong>Boolean</strong>: When set to
 *        <code>true</code>, the items will animate with the default duration.</li>
 *        <li><strong>Number</strong>: The duration for the animation, in
 *        milliseconds.</li></ul>
 * @property boolean $Scroll If set to true, the page scrolls when coming to an edge.
 * @property integer $ScrollSensitivity Defines how near the mouse must be to an edge to start scrolling.
 * @property integer $ScrollSpeed The speed at which the window should scroll once the mouse pointer gets
 *        within the <a><code>scrollSensitivity</code></a> distance.
 * @property string $Tolerance Specifies which mode to use for testing whether the item being moved is
 *        hovering over another item. Possible values:
 *                        <ul><li><code>"intersect"</code>: The item overlaps the other item by
 *        at least 50%.</li>                    <li><code>"pointer"</code>: The mouse pointer
 *        overlaps the other item.</li></ul>
 * @property integer $ZIndex Z-index for element/helper while being sorted.
 */
class QSortableGen extends QPanel
{

    protected $strJavaScripts = __JQUERY_EFFECTS__;
    protected $strStyleSheets = __JQUERY_CSS__;

    /** @var mixed */
    protected $mixAppendTo = null;

    /** @var string */
    protected $strAxis = null;

    /** @var mixed */
    protected $mixCancel = null;

    /** @var mixed */
    protected $mixConnectWith = null;

    /** @var mixed */
    protected $mixContainment = null;

    /** @var string */
    protected $strCursor = null;

    /** @var mixed */
    protected $mixCursorAt = null;

    /** @var integer */
    protected $intDelay;

    /** @var boolean */
    protected $blnDisabled = null;

    /** @var integer */
    protected $intDistance = null;

    /** @var boolean */
    protected $blnDropOnEmpty = null;

    /** @var boolean */
    protected $blnForceHelperSize = null;

    /** @var boolean */
    protected $blnForcePlaceholderSize = null;

    /** @var array */
    protected $arrGrid = null;

    /** @var mixed */
    protected $mixHandle = null;

    /** @var mixed */
    protected $mixHelper = null;

    /** @var mixed */
    protected $mixItems = null;

    /** @var integer */
    protected $intOpacity = null;

    /** @var string */
    protected $strPlaceholder = null;

    /** @var mixed */
    protected $mixRevert = null;

    /** @var boolean */
    protected $blnScroll = null;

    /** @var integer */
    protected $intScrollSensitivity = null;

    /** @var integer */
    protected $intScrollSpeed = null;

    /** @var string */
    protected $strTolerance = null;

    /** @var integer */
    protected $intZIndex = null;

    public function GetEndScript()
    {
        $str = '';
        if ($this->getJqControlId() !== $this->ControlId) {
            // #845: if the element receiving the jQuery UI events is different than this control
            // we need to clean-up the previously attached event handlers, so that they are not duplicated
            // during the next ajax update which replaces this control.
            $str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
        }
        return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
    }

    public function GetControlJavaScript()
    {
        return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
    }

    public function getJqSetupFunction()
    {
        return 'sortable';
    }

    protected function makeJqOptions()
    {
        $strJqOptions = '';
        $strJqOptions .= $this->makeJsProperty('AppendTo', 'appendTo');
        $strJqOptions .= $this->makeJsProperty('Axis', 'axis');
        $strJqOptions .= $this->makeJsProperty('Cancel', 'cancel');
        $strJqOptions .= $this->makeJsProperty('ConnectWith', 'connectWith');
        $strJqOptions .= $this->makeJsProperty('Containment', 'containment');
        $strJqOptions .= $this->makeJsProperty('Cursor', 'cursor');
        $strJqOptions .= $this->makeJsProperty('CursorAt', 'cursorAt');
        $strJqOptions .= $this->makeJsProperty('Delay', 'delay');
        $strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
        $strJqOptions .= $this->makeJsProperty('Distance', 'distance');
        $strJqOptions .= $this->makeJsProperty('DropOnEmpty', 'dropOnEmpty');
        $strJqOptions .= $this->makeJsProperty('ForceHelperSize', 'forceHelperSize');
        $strJqOptions .= $this->makeJsProperty('ForcePlaceholderSize', 'forcePlaceholderSize');
        $strJqOptions .= $this->makeJsProperty('Grid', 'grid');
        $strJqOptions .= $this->makeJsProperty('Handle', 'handle');
        $strJqOptions .= $this->makeJsProperty('Helper', 'helper');
        $strJqOptions .= $this->makeJsProperty('Items', 'items');
        $strJqOptions .= $this->makeJsProperty('Opacity', 'opacity');
        $strJqOptions .= $this->makeJsProperty('Placeholder', 'placeholder');
        $strJqOptions .= $this->makeJsProperty('Revert', 'revert');
        $strJqOptions .= $this->makeJsProperty('Scroll', 'scroll');
        $strJqOptions .= $this->makeJsProperty('ScrollSensitivity', 'scrollSensitivity');
        $strJqOptions .= $this->makeJsProperty('ScrollSpeed', 'scrollSpeed');
        $strJqOptions .= $this->makeJsProperty('Tolerance', 'tolerance');
        $strJqOptions .= $this->makeJsProperty('ZIndex', 'zIndex');
        if ($strJqOptions)
            $strJqOptions = substr($strJqOptions, 0, -2);
        return $strJqOptions;
    }

    protected function makeJsProperty($strProp, $strKey)
    {
        $objValue = $this->$strProp;
        if (null === $objValue) {
            return '';
        }

        return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
    }

    /**
     * Cancels a change in the current sortable and reverts it to the state prior
     * to when the current sort was started. Useful in the stop and receive
     * callback functions.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Cancel()
    {
        $this->CallJqUiMethod("cancel");
    }

    /**
     * Call a JQuery UI Method on the object.
     *
     * A helper function to call a jQuery UI Method. Takes variable number of arguments.
     *
     * @param string $strMethodName the method name to call
     * @internal param $mixed [optional] $mixParam1
     * @internal param $mixed [optional] $mixParam2
     */
    protected function CallJqUiMethod($strMethodName /* , ... */)
    {
        $args = func_get_args();

        $strArgs = JavaScriptHelper::toJsObject($args);
        $strJs = sprintf('jQuery("#%s").%s(%s)', $this->getJqControlId(), $this->getJqSetupFunction(), substr($strArgs, 1, strlen($strArgs) - 2)); // params without brackets
        QApplication::ExecuteJavaScript($strJs);
    }

    /**
     * Removes the sortable functionality completely. This will return the element
     * back to its pre-init state.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Destroy()
    {
        $this->CallJqUiMethod("destroy");
    }

    /**
     * Disables the sortable.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Disable()
    {
        $this->CallJqUiMethod("disable");
    }

    /**
     * Enables the sortable.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Enable()
    {
        $this->CallJqUiMethod("enable");
    }

    /**
     * Gets the value currently associated with the specified
     * <code>optionName</code>.<ul><li><strong>optionName</strong> Type:
     * <a>String</a> The name of the option to get.</li></ul>
     * @param $optionName
     */
    public function Option($optionName)
    {
        $this->CallJqUiMethod("option", $optionName);
    }

    /**
     * Gets an object containing key/value pairs representing the current sortable
     * options hash.<ul><li>This method does not accept any arguments.</li></ul>
     */
    public function Option1()
    {
        $this->CallJqUiMethod("option");
    }

    /**
     * Sets the value of the sortable option associated with the specified
     * <code>optionName</code>.<ul><li><strong>optionName</strong> Type:
     * <a>String</a> The name of the option to set.</li>
     * <li><strong>value</strong> Type: <a>Object</a> A value to set for the
     * option.</li></ul>
     * @param $optionName
     * @param $value
     */
    public function Option2($optionName, $value)
    {
        $this->CallJqUiMethod("option", $optionName, $value);
    }

    /**
     * Sets one or more options for the sortable.<ul><li><strong>options</strong>
     * Type: <a>Object</a> A map of option-value pairs to set.</li></ul>
     * @param $options
     */
    public function Option3($options)
    {
        $this->CallJqUiMethod("option", $options);
    }

    /**
     * Refresh the sortable items. Triggers the reloading of all sortable items,
     * causing new items to be recognized.<ul><li>This method does not accept any
     * arguments.</li></ul>
     */
    public function Refresh()
    {
        $this->CallJqUiMethod("refresh");
    }

    /**
     * Refresh the cached positions of the sortable items. Calling this method
     * refreshes the cached item positions of all sortables.<ul><li>This method
     * does not accept any arguments.</li></ul>
     */
    public function RefreshPositions()
    {
        $this->CallJqUiMethod("refreshPositions");
    }

    /**
     * <p>Serializes the sortable's item <code>id</code>s into a form/ajax
     * submittable string. Calling this method produces a hash that can be
     * appended to any url to easily submit a new item order back to the
     * server.</p>                <p>It works by default by looking at the <code>id</code>
     * of each item in the format <code>"setname_number"</code>, and it spits out
     * a hash like <code>"setname[]=number&amp;setname[]=number"</code>.</p>
     *                <p><em>Note: If serialize returns an empty string, make sure the
     * <code>id</code> attributes include an underscore.  They must be in the
     * form: <code>"set_number"</code> For example, a 3 element list with
     * <code>id</code> attributes <code>"foo_1"</code>, <code>"foo_5"</code>,
     * <code>"foo_2"</code> will serialize to
     * <code>"foo[]=1&amp;foo[]=5&amp;foo[]=2"</code>. You can use an underscore,
     * equal sign or hyphen to separate the set and number. For example
     * <code>"foo=1"</code>, <code>"foo-1"</code>, and <code>"foo_1"</code> all
     * serialize to
     * <code>"foo[]=1"</code>.</em></p><ul><li><strong>options</strong> Type:
     * <a>Object</a> Options to customize the serialization.
     * <ul><li><strong>key</strong> (default: <code>the part of the attribute in
     * front of the separator</code>) Type: <a>String</a> Replaces
     * <code>part1[]</code> with the specified value.</li>
     * <li><strong>attribute</strong> (default: <code>"id"</code>) Type:
     * <a>String</a> The name of the attribute to use for the values.</li>
     * <li><strong>expression</strong> (default: <code>/(.+)[-=_](.+)/</code>)
     * Type: <a>RegExp</a> A regular expression used to split the attribute value
     * into key and value parts.</li></ul></li></ul>
     * @param $options
     */
    public function Serialize($options)
    {
        $this->CallJqUiMethod("serialize", $options);
    }

    /**
     * Serializes the sortable's item id's into an array of
     * string.<ul><li><strong>options</strong> Type: <a>Object</a> Options to
     * customize the serialization. <ul><li><strong>attribute</strong> (default:
     * <code>"id"</code>) Type: <a>String</a> The name of the attribute to use for
     * the values.</li></ul></li></ul>
     * @param $options
     */
    public function ToArray($options)
    {
        $this->CallJqUiMethod("toArray", $options);
    }

    public function __get($strName)
    {
        switch ($strName) {
            case 'AppendTo':
                return $this->mixAppendTo;
            case 'Axis':
                return $this->strAxis;
            case 'Cancel':
                return $this->mixCancel;
            case 'ConnectWith':
                return $this->mixConnectWith;
            case 'Containment':
                return $this->mixContainment;
            case 'Cursor':
                return $this->strCursor;
            case 'CursorAt':
                return $this->mixCursorAt;
            case 'Delay':
                return $this->intDelay;
            case 'Disabled':
                return $this->blnDisabled;
            case 'Distance':
                return $this->intDistance;
            case 'DropOnEmpty':
                return $this->blnDropOnEmpty;
            case 'ForceHelperSize':
                return $this->blnForceHelperSize;
            case 'ForcePlaceholderSize':
                return $this->blnForcePlaceholderSize;
            case 'Grid':
                return $this->arrGrid;
            case 'Handle':
                return $this->mixHandle;
            case 'Helper':
                return $this->mixHelper;
            case 'Items':
                return $this->mixItems;
            case 'Opacity':
                return $this->intOpacity;
            case 'Placeholder':
                return $this->strPlaceholder;
            case 'Revert':
                return $this->mixRevert;
            case 'Scroll':
                return $this->blnScroll;
            case 'ScrollSensitivity':
                return $this->intScrollSensitivity;
            case 'ScrollSpeed':
                return $this->intScrollSpeed;
            case 'Tolerance':
                return $this->strTolerance;
            case 'ZIndex':
                return $this->intZIndex;
            default:
                try {
                    return parent::__get($strName);
                } catch (QCallerException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }
        }
    }

    public function __set($strName, $mixValue)
    {
        switch ($strName) {
            case 'AppendTo':
                $this->mixAppendTo = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'appendTo', $mixValue);
                }
                break;

            case 'Axis':
                try {
                    $this->strAxis = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'axis', $this->strAxis);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Cancel':
                $this->mixCancel = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'cancel', $mixValue);
                }
                break;

            case 'ConnectWith':
                $this->mixConnectWith = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'connectWith', $mixValue);
                }
                break;

            case 'Containment':
                $this->mixContainment = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'containment', $mixValue);
                }
                break;

            case 'Cursor':
                try {
                    $this->strCursor = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'cursor', $this->strCursor);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'CursorAt':
                $this->mixCursorAt = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'cursorAt', $mixValue);
                }
                break;

            case 'Delay':
                try {
                    $this->intDelay = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'delay', $this->intDelay);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Disabled':
                try {
                    $this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Distance':
                try {
                    $this->intDistance = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'distance', $this->intDistance);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'DropOnEmpty':
                try {
                    $this->blnDropOnEmpty = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'dropOnEmpty', $this->blnDropOnEmpty);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'ForceHelperSize':
                try {
                    $this->blnForceHelperSize = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'forceHelperSize', $this->blnForceHelperSize);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'ForcePlaceholderSize':
                try {
                    $this->blnForcePlaceholderSize = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'forcePlaceholderSize', $this->blnForcePlaceholderSize);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Grid':
                try {
                    $this->arrGrid = QType::Cast($mixValue, QType::ArrayType);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'grid', $this->arrGrid);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Handle':
                $this->mixHandle = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'handle', $mixValue);
                }
                break;

            case 'Helper':
                $this->mixHelper = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'helper', $mixValue);
                }
                break;

            case 'Items':
                $this->mixItems = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'items', $mixValue);
                }
                break;

            case 'Opacity':
                try {
                    $this->intOpacity = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'opacity', $this->intOpacity);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Placeholder':
                try {
                    $this->strPlaceholder = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'placeholder', $this->strPlaceholder);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Revert':
                $this->mixRevert = $mixValue;

                if ($this->Rendered) {
                    $this->CallJqUiMethod('option', 'revert', $mixValue);
                }
                break;

            case 'Scroll':
                try {
                    $this->blnScroll = QType::Cast($mixValue, QType::Boolean);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'scroll', $this->blnScroll);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'ScrollSensitivity':
                try {
                    $this->intScrollSensitivity = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'scrollSensitivity', $this->intScrollSensitivity);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'ScrollSpeed':
                try {
                    $this->intScrollSpeed = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'scrollSpeed', $this->intScrollSpeed);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'Tolerance':
                try {
                    $this->strTolerance = QType::Cast($mixValue, QType::String);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'tolerance', $this->strTolerance);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }

            case 'ZIndex':
                try {
                    $this->intZIndex = QType::Cast($mixValue, QType::Integer);
                    if ($this->Rendered) {
                        $this->CallJqUiMethod('option', 'zIndex', $this->intZIndex);
                    }
                    break;
                } catch (QInvalidCastException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }


            case 'Enabled':
                $this->Disabled = !$mixValue; // Tie in standard QCubed functionality
                parent::__set($strName, $mixValue);
                break;

            default:
                try {
                    parent::__set($strName, $mixValue);
                    break;
                } catch (QCallerException $objExc) {
                    $objExc->IncrementOffset();
                    throw $objExc;
                }
        }
    }

}

?>
